# все объекты
Category.objects.all()
SELECT * FROM  category;

# один объект
Category.objects.get(вытаскиваем по уникальному элементу)
# ошибки возможные с get()
DoesNotExist - когда объект не найден
MultipleObjectsReturned - когда (get) возвращает несколько объектов

Category.objects.order_by().first()
SELECT * FROM category ORDER BY ... LIMIT 1;

Category.objects.order_by().last()
SELECT * FROM category ORDER BY ... DESC LIMIT 1;

# filter - фильтрация
Category.objects.filter(name=..., slug=...)
SELECT * FROM category WHERE name=... AND slug=...;

Category.objects.exclude(name=..., slug=...)
SELECT * FROM category WHERE  name <> ...;

# ограничение набора полей
only()
Category.objects.only('name',  'description')
SELECT name, description FROM category;

defer() - исключает указанные поля
Category.objects.defer('name', 'description')
SELECT image, slug, parent FROM category;

# сортирвка
order_by()
Category.objects.order_by('name')
SELECT * FROM category ORDER BY name;

Category.objects.order_by('-name')
SELECT * FROM category ORDER BY name DESC;

#
reverse()
Category.objects.all()
[obj1, obj2, obj3]

Category.objects.reverse()
[obj3, obj2, obj1]

#
values()
Category.objects.all()
[obj1, obj2, obj3]

Category.objects.values()
[{name': 'Спорт',  'slug': 'sport'} {'name': 'Музыка', 'slug': 'music'}

Category.objects.values('name', 'description')
[{name': ..., 'descriiption': ...}, {'name': ..., 'description': ...}]

#
values_list()
Category.objects.values('name', 'description')
[('Sport', '....'), ('Music', '...')]

# count()
Category.objects.count()
SELECT COUNT (*) FROM category;

# создание записей
category1 = Category(...)
category1.save()

category2 = Category.objects.create(...)
category2

# изменение записей
category1 = Category.objects.get(...)
category1.name = ...
category1.save()

Category.objects.filter(...).update(...)

# удаление
category1 = Category.objects.get(...)
category1.delete()

Category.objects.delete()
Category.objects.filter(...).delete()

Операторы (field lookups)

">" gt
"<" lt
">=" gte
"<=" lte
Categoory.objects.filter(age__gt=some_age)
SELECT * FROM category WHERE age > 'some_age';


LIKE, ILIKE

'a%' - startswith, istartswith

'%a' - endswith, iendswith

'%a%' - containswith, istartswith

IN - in
Category.objects.filter(name__in=['Cпорт', 'Музыка']

BETWEEN - range
Post.objects.filter(date__range=(start_date, end_date))
SELECT * FROM category WHERE date BETWEEN start_date AND end_datte;

isnull
Model.objects.filter(image__isnull=True)
SELECT * FROM model WHERE image IS NULL;

Model.objects.filter(image__isnull=False)
SELECT * FROM model WHERE image NOT NULL;





